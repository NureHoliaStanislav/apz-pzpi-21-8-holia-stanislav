1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

	Користувачами розробленої системи є 3 типи акторів: солдат–відвідувач курсу, інструктор та адміністратор. 
Взаємодію кожної ролі користувачів з системою представлено на діаграмі прецедентів (див. Рис. 1).
Таким чином, за допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію різних типів користувачів із системою.

2 ПРОЕКТУВАННЯ БАЗИ ДАНИХ

Для проектування бази даних було розроблено ER-модель даних (див. додат. А.1). Вона складається з 11 таблиць: користувачі, солдати, інструктори, тренування, солдати у тренуванні, міни, мапи, міни на мапі, завдання, результати тренування, налаштування.
У базі даних наявні наступні зв’язки між сутностями:
    • користувач - інструктор (1:1);
    • користувач - солдат (1:1);
    • інструктор - тренування (1:М);
    • солдат - солдати у тренуванні (1:М);
    • тренування - солдати у тренуванні (1:М);
    • тренування - мапа (1:1);
    • мапа - міни на мапі (1:М);
    • міна - міни на мапі (1:М);
    • користувач - налаштування (1:1);
    • тренування - завдання (1:М);
    • тренування - результат тренування (1:1).
Модель користувача об’єднує в собі інформацію властиву кожному користувачу незалежно від ролі, у свою чергу сутності солдат та інструктор містять в собі інформацію властиву для користувача з відповідною роллю.
До тренування може бути прив’язані: один інструктор, декілька солдатів, декілька завдань, один результат.
Інструктор створює тренування і додає туди міни, завдання та солдатів, що проходять тренування. Після того як тренування закінчилось, інструктор генерує результати та отримує процент успішності операції.
Мапи відображають площу на котрій відбувається тренування з локацією мін.
Міни відображають собою пристрої інтернету розумних речей, що імітують роботу мін.

3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Моя система має клієнт-серверну архітектуру, що складається з трьох рівнів: Клієнтський застосунок(веб-застосунок, мобільний застосунок), сервер на Django REST Framework, сервер бази даних PostgreSQL
З серверного застосунку до бази даних здійснюється доступ за допомогою технології Django ORM, що надає зручний інтерфейс для взаємодії з базами даних у вигляді об’єктів сутностей.
Веб-сервер та сервер бази даних, були запущені мною у Docker контейнерах, завдяки Docker Compose.
	Для більш детальної візуалізації використаних технологій було розроблено діаграму розгортання (див. рис. 2).

4 СПЕЦИФІКАЦІЯ REST

REST API в розробленому проєкті складається з 31 кінцевої точки. Кожна кінцева точка відповідає за надання даних клієнту та виконання бізнес логіки.
Специфікація кожної кінцевої точки REST API проєкту наведена у таблиці 1.

5 UML ДІАГРАМА ПАКЕТІВ

Під час аналізу програмної системи було виділено кілька пакетів, які утворюють компоненти системи. Взаємозв'язки між цими пакетами проілюстровано на діаграмі пакетів (див. рис. 3). 
Пакет «djangoapp» є основним модулем мого проекту. Він містить всі важливі частини мого веб-додатку, включаючи моделі, представлення, URL-маршрути та інше. Пакет «URL Patterns» містить всі URL-маршрути мого додатку. Пакет «Serializers» містить «серіалізатори», які використовуються для перетворення даних моделей у формати, які можна легко передавати та працювати з ними, такі як JSON. Пакет «Views» містить представлення, які визначають, як приймати та обробляти запити надіслані серверу. Пакет «Models» містить моделі, що являють собою таблиці бази даних.
Архітектурою мого проекту є MV(Model, View), це стандартна архітектура що використовується Django REST Framework. MV це похідна від MVC архітектура, що не має контролерів. Django сам виконує всі дії за котрі відповідає контролер в MVC.
