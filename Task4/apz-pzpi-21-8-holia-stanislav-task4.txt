1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ


Користувачами розробленої програмної системи є 2 типи акторів:
інструктор та солдат.
Взаємодію кожної ролі користувачів з системою представлено на
діаграмі прецедентів (див. Рис. 1).
Таким чином, за допомогою діаграми прецедентів було визначено
функціональні потреби та взаємодію різних типів користувачів із системою.


2 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ


Клієнтська частина програмної системи розроблена на мові
програмування JavaScript з використанням фреймворку React. Для стилізації
інтерфейсу використовувався CSS. Також для побудови більшої частини
інтерфейсу я використав Material UI, котрий надає готові, добре стилізовані
компоненти, що дозволяє швидко створювати привабливі веб-інтерфейси.
Для навігації по сайту був використаний react-router-dom, що забезпечує
потужні засоби для створення динамічної навігації. Для виконання
асинхронних запитів використовувалась бібліотека axios. Клієнтський
застосунок локалізований, за допомогою бібліотеки i18next, яка дозволяє
легко реалізувати багатомовний інтерфейс та зручно переводити текстові
елементи. Для візуалізації використаних пакетів було розроблено відповідну
діаграму пакетів (див. Рисунок 1).
Клієнтська частина проєкту організована згідно з архітектурною
методологією Feature-Sliced Design, що передбачає розділення застосунку на
різні шари - каталоги верхнього рівня. У проєкті визначено 4 шари: shared,
config, pages, app.
Шар shared: Тут містяться компоненти, що використовуються іншими
частинами проєкту, в мене це заголовок сайту та сервіс аутентифікації.
Шар config: В цьому шарі знаходяться файли конфігурації. Наприклад,
налаштування локалізації.
Шар pages: Тут знаходяться сторінки веб-сайту, які поділені на
підкаталоги за їхньою функціональністю. Підкаталог сторінки містить ui
сегмент та api сегмент, перший відповідає за інтерфейс, другий має код, що
здійснює запити до серверу.
Шар app: Цей шар визначає основну конфігурацію застосунку,
включаючи вхідну точку додатку та його головний компонент App.js.
Для кращого уявлення архітектури системи було створено діаграму
компонентів, що дозволяє детально проаналізувати її структуру та
взаємозв'язки між компонентами (див. додаток А).
Використання програмної системи починається з авторизації – або
створення нового профілю, або входу в уже створений. При цьому, створити
профіль адміністратора неможливо.
В залежності від належності до адміністраторів, користувач отримує
доступ до функціоналу адміністратора або користувача системи.
Користувач системи бачить свої тренування, адміністратор в свою
чергу має доступ до сторінок для адміністрування системи, він може
додавати та видаляти міни з системи, блокувати користувачів.
Користувач може перейти до власного профілю та переглянути
інформацію про себе.
Для кращого уявлення про взаємодію користувачів з клієнтською
частиною системи було розроблено діаграму взаємодії (див. додаток Б).
 Це дозволило визначити основні технології та архітектуру системи
через діаграми пакетів, компонентів та їх взаємодію.
У додатку В наведено приклади коду клієнтської частини системи.


ВИСНОВКИ


Під час виконання лабораторної роботи я спроектував та реалізував
клієнтську частину програмної системи. Результатом є розроблена програмна
реалізація веб клієнту, що успішно взаємодіє з сервером та розширює
функціонал системи.
